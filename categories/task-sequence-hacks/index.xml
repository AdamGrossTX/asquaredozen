<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Task Sequence Hacks on A Square Dozen</title><link>https://www.asquaredozen.com/categories/task-sequence-hacks/</link><description>Recent content in Task Sequence Hacks on A Square Dozen</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 21 Feb 2020 02:15:17 +0000</lastBuildDate><atom:link href="https://www.asquaredozen.com/categories/task-sequence-hacks/index.xml" rel="self" type="application/rss+xml"/><item><title>Gather No More â€“ Using Dynamic Task Sequence Variables in ConfigMgr</title><link>https://www.asquaredozen.com/2020/02/20/gather-no-more-using-dynamic-task-sequence-variables-in-configmgr/</link><pubDate>Fri, 21 Feb 2020 02:15:17 +0000</pubDate><guid>https://www.asquaredozen.com/2020/02/20/gather-no-more-using-dynamic-task-sequence-variables-in-configmgr/</guid><description>Update 09/14/2020 - You can download the Gather Light Task Sequence from the Community Hub now! https://communityhub.microsoft.com/item/7812
Update 02/21/2020 - I added a new section with a Gather Task Sequence. Check out the DIY Gather in the Task Sequence section below. It even has a GIF (unlike Software Center!)
If you&amp;rsquo;ve used the Microsoft Deployment ToolKit (MDT) or ConfigMgr or have ever heard of &amp;lsquo;Johan and Mikael&amp;rsquo;, you&amp;rsquo;ve likely used or at least heard/read about using MDT and the Gather script that&amp;rsquo;s included with it as part of your Task Sequences.</description></item><item><title>Building a Smarter Task Sequence</title><link>https://www.asquaredozen.com/2019/04/30/building-a-smarter-task-sequence/</link><pubDate>Tue, 30 Apr 2019 06:41:33 +0000</pubDate><guid>https://www.asquaredozen.com/2019/04/30/building-a-smarter-task-sequence/</guid><description>I&amp;rsquo;m procrastinating prepping my sessions for MMS 2019 and decided I should write a blog post instead to help get me motivated. A few weeks ago I tweeted that my task sequence is built to be re-run if it fails and it will &amp;lsquo;pick up where it left off&amp;rsquo;. Several folks expressed interest in the idea so I wanted to share the general framework for having a task sequence that can be re-run after failure to complete the job.</description></item><item><title>Building An Even Better Task Sequence</title><link>https://www.asquaredozen.com/2018/12/14/building-an-even-better-task-sequence/</link><pubDate>Fri, 14 Dec 2018 08:09:31 +0000</pubDate><guid>https://www.asquaredozen.com/2018/12/14/building-an-even-better-task-sequence/</guid><description>Note
03/12/2019 - This post has been updated to support changes in 1901 TP and (I assume) 1902 CB to the TSProgressUI.exe ConfigMgr client component used for the custom described dialog below.
Note: You must be running ConfigMgr/SCCM 1810 or higher to use the _SMSTSLastActionName variable included in this post. However you can use the same concepts and error dialog with previous versions (but seriously, upgrade already!). Also, go upvote the UserVoice item to have the product do this natively.</description></item><item><title>Building a Better Task Sequence</title><link>https://www.asquaredozen.com/2018/11/29/building-a-better-task-sequence/</link><pubDate>Thu, 29 Nov 2018 06:41:41 +0000</pubDate><guid>https://www.asquaredozen.com/2018/11/29/building-a-better-task-sequence/</guid><description>Be sure to check out the sequel to this post Building an Even Better Task Sequence.
I&amp;rsquo;ve had this post in the queue for a while now and have been working on a script to help with some of this, but with the release of System Center Configuration Manager 1810 I don&amp;rsquo;t have to hack something together anymore! One of the best new features which allows us to capture the name of the last action using the new variable _SMSTSLastActionName.</description></item><item><title>Debugging SCCM/ConfigMgr Task Sequences on the Fly</title><link>https://www.asquaredozen.com/2018/10/03/debugging-sccm-configmgr-task-sequences-on-the-fly/</link><pubDate>Wed, 03 Oct 2018 16:11:08 +0000</pubDate><guid>https://www.asquaredozen.com/2018/10/03/debugging-sccm-configmgr-task-sequences-on-the-fly/</guid><description>If you have worked with SCCM/ConfigMgr Task Sequences for any length of time, you&amp;rsquo;ve likely needed to debug them. Many times, you need to check the value of a Task Sequence variable. The generally accepted approach is to add a Run Command Line step to your Task Sequence and run ServiceUI.exe like this:
ServiceUI.exe -process:TSProgressUI.exe cmd.exe
This approach is great if you planned ahead and you are in a test Task Sequence.</description></item><item><title>Using SCCM Task Sequence Variables as Scripts</title><link>https://www.asquaredozen.com/2018/08/27/using-sccm-task-sequence-variables-as-scripts/</link><pubDate>Mon, 27 Aug 2018 06:09:27 +0000</pubDate><guid>https://www.asquaredozen.com/2018/08/27/using-sccm-task-sequence-variables-as-scripts/</guid><description>The more I dig in to SCCM/ConfigMgr, the more cool things I find. Every time I read a new post blog about things people have done with their Task Sequences, I get inspired to try more things. One of those things is setting Task Sequence variable values from the output of a script. At this point, I&amp;rsquo;m sure we&amp;rsquo;ve all read and re-read Gary Blok&amp;rsquo;s Waas posts and picked up a few tricks, I know I have.</description></item><item><title>Dynamically Updating Unattend.XML during an OSD Task Sequence using MDT Variables and ZTI Scripts.</title><link>https://www.asquaredozen.com/2018/07/11/dynamically-updating-unattend-xml-during-an-osd-task-sequence-using-mdt-variables-and-zti-scripts/</link><pubDate>Wed, 11 Jul 2018 21:25:48 +0000</pubDate><guid>https://www.asquaredozen.com/2018/07/11/dynamically-updating-unattend-xml-during-an-osd-task-sequence-using-mdt-variables-and-zti-scripts/</guid><description>While trying to set the KeyboardLocale in my ConfigMgr/SCCM Task Sequence, I found that my settings weren&amp;rsquo;t getting updated during the Task Sequence. I used to think that custom Unattend.XML that you include in your Task Sequence would be used as-is. I was wrong. I did a bit of digging and here&amp;rsquo;s what I discovered.
FYI: I&amp;rsquo;m using ConfigMgr/SCCM with MDT integrated and I&amp;rsquo;m using an MDT Task Sequence built in ConfigMgr as the basis for this discussion.</description></item><item><title>Triggering ConfigMgr Client Actions from a Task Sequence</title><link>https://www.asquaredozen.com/2018/06/14/triggering-configmgr-client-actions-from-a-task-sequence/</link><pubDate>Fri, 15 Jun 2018 04:20:56 +0000</pubDate><guid>https://www.asquaredozen.com/2018/06/14/triggering-configmgr-client-actions-from-a-task-sequence/</guid><description>This week, we were working on testing Windows 7 to Windows 10 In-Place Upgrades and ran into an issue where our clients weren&amp;rsquo;t updating their Operating System version in the ConfigMgr console. After some helpful responses on Twitter, I was able to add a client action trigger step to the end of my Task Sequence. In my production environment, we have a child task sequence that we call that has several client action steps in it including Request Machine Assignments (Machine Policies) {00000000-0000-0000-0000-000000000021}, Hardware Inventory {00000000-0000-0000-0000-000000000001} and now a Discovery Inventory {00000000-0000-0000-0000-000000000003}.</description></item></channel></rss>