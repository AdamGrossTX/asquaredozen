<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Feature Update on A Square Dozen</title><link>https://www.asquaredozen.com/categories/feature-update/</link><description>Recent content in Feature Update on A Square Dozen</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 02 Dec 2020 22:54:15 +0000</lastBuildDate><atom:link href="https://www.asquaredozen.com/categories/feature-update/index.xml" rel="self" type="application/rss+xml"/><item><title>Autopilot Profile causes Device Rename after ConfigMgr OSD Task Sequence and Breaks AD Domain Trust</title><link>https://www.asquaredozen.com/2020/12/02/autopilot-profile-causes-device-rename-after-configmgr-osd-task-sequence-and-breaks-ad-domain-trust/</link><pubDate>Wed, 02 Dec 2020 22:54:15 +0000</pubDate><guid>https://www.asquaredozen.com/2020/12/02/autopilot-profile-causes-device-rename-after-configmgr-osd-task-sequence-and-breaks-ad-domain-trust/</guid><description>We got some new hardware models in this week and added drivers to our ConfigMgr OSD Task Sequence (with Windows 10 1909 serviced with November 2020 updates) to test. One of the devices kept ending up with a broken domain trust relationship when you attempt to log in immediately following build completion.
The security database on the server does not have a computer account for this workstation trust relationship One clue that we had was that something was renaming the device.</description></item><item><title>Windows 10 Feature Updates – Testing the /MigNEO Disable Parameter</title><link>https://www.asquaredozen.com/2020/09/13/windows-10-feature-updates-testing-the-migneo-disable-parameter/</link><pubDate>Sun, 13 Sep 2020 16:54:40 +0000</pubDate><guid>https://www.asquaredozen.com/2020/09/13/windows-10-feature-updates-testing-the-migneo-disable-parameter/</guid><description>Over the past few weeks I&amp;rsquo;ve been testing re-writing my Windows 10 Feature Update repo to make it easier to implement - if you haven&amp;rsquo;t tried it, go check it out. Just follow the readme in the repo https://github.com/AdamGrossTX/Windows10FeatureUpdates. During the re-write I was reminded that there were a few command line parameters that I hadn&amp;rsquo;t experimented with. One of them is /MigNEO which only has a Disable option. According to the product group, NEO stands for non-event objective which, doesn&amp;rsquo;t help it make more sense to me.</description></item><item><title>Analyze SetupDiag errors for Feature Updates in ConfigMgr 2008 Technical Preview</title><link>https://www.asquaredozen.com/2020/08/11/analyze-setupdiag-errors-for-feature-updates-in-configmgr-2008-technical-preview/</link><pubDate>Wed, 12 Aug 2020 04:03:21 +0000</pubDate><guid>https://www.asquaredozen.com/2020/08/11/analyze-setupdiag-errors-for-feature-updates-in-configmgr-2008-technical-preview/</guid><description>As soon as I read the release notes for ConfigMgr 2008 Technical Preview I knew I would be doing some digging. This release introduced the first iteration of a feature that will hopefully help make Windows 10 Feature Update servicing a little easier to manage. Listed as Analyze SetupDiag errors for feature updates this feature has been added to the Windows 10 Servicing dashboard. When I initially read the release notes and looked at the included graph, I was disappointed.</description></item><item><title>Demystifying Windows 10 Feature Update Blocks</title><link>https://www.asquaredozen.com/2020/07/26/demystifying-windows-10-feature-update-blocks/</link><pubDate>Mon, 27 Jul 2020 04:00:36 +0000</pubDate><guid>https://www.asquaredozen.com/2020/07/26/demystifying-windows-10-feature-update-blocks/</guid><description>Disclaimer - if you manually bypass Feature Update blocks, you risk causing issues with your device. The blocks exist for a reason and should be respected. This information is provided for educational purposes only. Proceed with caution.
Windows 10 Feature Updates are released twice per year. For each release, Microsoft has the ability to block the update from being installed or even showing up in Widows Update for applications/drivers/devices that have known compatibility issues.</description></item><item><title>Repairing Invalid Win32_UserProfile WMI Class on Windows 7 to 10 In-Place Upgraded Devices</title><link>https://www.asquaredozen.com/2020/01/19/repairing-invalid-win32-userprofile-wmi-class-on-windows-7-to-10-in-place-upgraded-devices/</link><pubDate>Sun, 19 Jan 2020 21:35:28 +0000</pubDate><guid>https://www.asquaredozen.com/2020/01/19/repairing-invalid-win32-userprofile-wmi-class-on-windows-7-to-10-in-place-upgraded-devices/</guid><description>I recently needed to query the Win32_UserProfile class in WMI for some reporting I was working on. This class is a default Hardware Inventory class in ConfigMgr. I noticed that we had a large number of devices were reporting NULL values for several properties in this class when I queried them in SQL so I decided to investigate. From the ConfigMgr console, I used CMPivot (only one of the best tools ever!</description></item><item><title>Convert ConfigMgr Error Codes to Plain Text Messages for Reporting – Part 3</title><link>https://www.asquaredozen.com/2019/11/25/convert-configmgr-error-codes-to-plain-text-messages-for-reporting-part-3/</link><pubDate>Tue, 26 Nov 2019 00:23:24 +0000</pubDate><guid>https://www.asquaredozen.com/2019/11/25/convert-configmgr-error-codes-to-plain-text-messages-for-reporting-part-3/</guid><description>I demoed this at MMS Jazz 2019 Tip and Tricks. This is Part 3 of a 3-part series. Part 1covers how to create a PowerShell script to lookup error messages. Part 2 covers creating an Azure Function.
My goal is to use ConfigMgr ErrorCodes in a report in Power BI for easier deployment monitoring. As I mentioned in Part 1, the error text isn&amp;rsquo;t available in the ConfigMgr DB, so I created a PowerShell script to look up the error code.</description></item><item><title>Convert ConfigMgr Error Codes to Plain Text Messages for Reporting – Part 2</title><link>https://www.asquaredozen.com/2019/11/25/convert-configmgr-error-codes-to-plain-text-messages-for-reporting-part-2/</link><pubDate>Mon, 25 Nov 2019 18:56:50 +0000</pubDate><guid>https://www.asquaredozen.com/2019/11/25/convert-configmgr-error-codes-to-plain-text-messages-for-reporting-part-2/</guid><description>I demoed this at MMS Jazz 2019 Tip and Tricks. This is Part 2 of a 3-part series. Part 1 covers how to create a PowerShell script to lookup error messages. Part 3 covers how to create a Power BI function to use an Azure Function.
I had heard of Azure Functions and I&amp;rsquo;ve written web API&amp;rsquo;s but I had never put the 2 together until I ran into this dilemma.</description></item><item><title>Convert ConfigMgr Error Codes to Plain Text Messages for Reporting – Part 1</title><link>https://www.asquaredozen.com/2019/11/25/convert-configmgr-error-codes-to-plain-text-messages-for-reporting-part-1/</link><pubDate>Mon, 25 Nov 2019 18:02:24 +0000</pubDate><guid>https://www.asquaredozen.com/2019/11/25/convert-configmgr-error-codes-to-plain-text-messages-for-reporting-part-1/</guid><description>I demoed this at MMS Jazz 2019 Tip and Tricks. This is Part 1 of a 3-part series. Part 2 covers creating an Azure Function. Part 3 covers how to create a Power BI function to use an Azure Function.
If you have ever checked the logs in ConfigMgr, you&amp;rsquo;ve likely run across an error code in a format like 0x87D00664 or -2016410012. If use the error lookup feature in CMTrace, you can generally convert the error to plain text.</description></item><item><title>Windows 10 Feature Updates – The Challenge of Servicing in the Enterprise</title><link>https://www.asquaredozen.com/2019/10/05/windows-10-feature-updates-the-challenge-of-servicing-in-the-enterprise/</link><pubDate>Sat, 05 Oct 2019 15:09:39 +0000</pubDate><guid>https://www.asquaredozen.com/2019/10/05/windows-10-feature-updates-the-challenge-of-servicing-in-the-enterprise/</guid><description>I hope I never have to build another Task Sequence again. Seriously. Wouldn&amp;rsquo;t that be nice? I know that&amp;rsquo;s not truly feasible, but can&amp;rsquo;t a guy dream? It&amp;rsquo;s not that I dislike Task Sequences, it&amp;rsquo;s just that I strongly believe that Modern Desktop Management (AutoPilot/Device Reset/Feature Update servicing/etc.) is going to continue to improve and we should continue to attempt to adopt these tools with as much effort as we spend on customizing Task Sequences.</description></item><item><title>Windows 10 Feature Updates – Using Custom Action Scripts</title><link>https://www.asquaredozen.com/2019/08/25/windows-10-feature-updates-using-custom-action-scripts/</link><pubDate>Mon, 26 Aug 2019 05:28:32 +0000</pubDate><guid>https://www.asquaredozen.com/2019/08/25/windows-10-feature-updates-using-custom-action-scripts/</guid><description>This is the next installment in my Windows 10 Feature Updates series.
Custom Actions Beginning in Windows 10 1803, custom actions were introduced and represent what Suma SaganeGowda referred to as a &amp;lsquo;poor man&amp;rsquo;s implementation of Task Sequences&amp;rsquo; at Ignite 2018 in session BRK3027. Windows setup will check for the existence of these special folders and scripts and use them as part of the Feature Update process. They allow you to run scripts at various stages in the Feature Update process as well as specify reflected driver paths just as you can in Setupconfig.</description></item><item><title>Windows 10 Feature Updates – Using Setupconfig.ini to Manage Feature Updates in the Enterprise</title><link>https://www.asquaredozen.com/2019/08/25/windows-10-feature-updates-using-setupconfig-ini-to-manage-feature-updates-in-the-enterprise/</link><pubDate>Mon, 26 Aug 2019 00:24:25 +0000</pubDate><guid>https://www.asquaredozen.com/2019/08/25/windows-10-feature-updates-using-setupconfig-ini-to-manage-feature-updates-in-the-enterprise/</guid><description>This is the next installment in my Windows 10 Feature Updates series.
Setupconfig.ini Setupconfig.ini is a file that can be used to pass command line arguments to the Windows Setup engine during a Windows installation. When Setupconfig.ini is specified in the command line (/ConfigFile &amp;lt;path to Setupconfig.ini&amp;gt;) or exists in the default location (%systemdrive%\Users\Default\AppData\Local\Microsoft\Windows\WSUS\Setupconfig.ini), any arguments in it will take precedence over arguments specified in the commandline. If you use this file, ensure that you aren&amp;rsquo;t counteracting commandline args that you may be using with other deployment methods such as Task Sequences (Task Sequences simply generate a command line based on which options you select).</description></item><item><title>Windows 10 Feature Updates – Leveraging SetupDiag for Better Reporting</title><link>https://www.asquaredozen.com/2019/08/22/windows-10-feature-updates-leveraging-setupdiag-for-better-reporting/</link><pubDate>Fri, 23 Aug 2019 05:57:11 +0000</pubDate><guid>https://www.asquaredozen.com/2019/08/22/windows-10-feature-updates-leveraging-setupdiag-for-better-reporting/</guid><description>This is the first post of my Windows 10 Feature Updates series, probably totally out of sequence, but I just need to start getting the pieces written and published. So here goes.
What is SetupDiag If you have worked with Windows 10 Operating System Deployments for any amount of time, you&amp;rsquo;ve likely had failures and encountered cryptic messages that you needed to triage. Hopefully you&amp;rsquo;ve come across SetupDiag. For the uninitiated, SetupDiag is a fancy little tool from Microsoft that you can run against the Windows installation logs (Panther Logs) either directly on a client or against an offline copy of the Panther logs from another client.</description></item></channel></rss>