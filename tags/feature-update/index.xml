<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Feature Update on A Square Dozen</title><link>https://www.asquaredozen.com/tags/feature-update/</link><description>Recent content in Feature Update on A Square Dozen</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 26 Nov 2019 00:23:24 +0000</lastBuildDate><atom:link href="https://www.asquaredozen.com/tags/feature-update/index.xml" rel="self" type="application/rss+xml"/><item><title>Convert ConfigMgr Error Codes to Plain Text Messages for Reporting – Part 3</title><link>https://www.asquaredozen.com/2019/11/25/convert-configmgr-error-codes-to-plain-text-messages-for-reporting-part-3/</link><pubDate>Tue, 26 Nov 2019 00:23:24 +0000</pubDate><guid>https://www.asquaredozen.com/2019/11/25/convert-configmgr-error-codes-to-plain-text-messages-for-reporting-part-3/</guid><description>I demoed this at MMS Jazz 2019 Tip and Tricks. This is Part 3 of a 3-part series. Part 1covers how to create a PowerShell script to lookup error messages. Part 2 covers creating an Azure Function.
My goal is to use ConfigMgr ErrorCodes in a report in Power BI for easier deployment monitoring. As I mentioned in Part 1, the error text isn&amp;rsquo;t available in the ConfigMgr DB, so I created a PowerShell script to look up the error code.</description></item><item><title>Windows 10 Feature Updates – Using Setupconfig.ini to Manage Feature Updates in the Enterprise</title><link>https://www.asquaredozen.com/2019/08/25/windows-10-feature-updates-using-setupconfig-ini-to-manage-feature-updates-in-the-enterprise/</link><pubDate>Mon, 26 Aug 2019 00:24:25 +0000</pubDate><guid>https://www.asquaredozen.com/2019/08/25/windows-10-feature-updates-using-setupconfig-ini-to-manage-feature-updates-in-the-enterprise/</guid><description>This is the next installment in my Windows 10 Feature Updates series.
Setupconfig.ini Setupconfig.ini is a file that can be used to pass command line arguments to the Windows Setup engine during a Windows installation. When Setupconfig.ini is specified in the command line (/ConfigFile &amp;lt;path to Setupconfig.ini&amp;gt;) or exists in the default location (%systemdrive%\Users\Default\AppData\Local\Microsoft\Windows\WSUS\Setupconfig.ini), any arguments in it will take precedence over arguments specified in the commandline. If you use this file, ensure that you aren&amp;rsquo;t counteracting commandline args that you may be using with other deployment methods such as Task Sequences (Task Sequences simply generate a command line based on which options you select).</description></item><item><title>Windows 10 Feature Updates – Leveraging SetupDiag for Better Reporting</title><link>https://www.asquaredozen.com/2019/08/22/windows-10-feature-updates-leveraging-setupdiag-for-better-reporting/</link><pubDate>Fri, 23 Aug 2019 05:57:11 +0000</pubDate><guid>https://www.asquaredozen.com/2019/08/22/windows-10-feature-updates-leveraging-setupdiag-for-better-reporting/</guid><description>This is the first post of my Windows 10 Feature Updates series, probably totally out of sequence, but I just need to start getting the pieces written and published. So here goes.
What is SetupDiag If you have worked with Windows 10 Operating System Deployments for any amount of time, you&amp;rsquo;ve likely had failures and encountered cryptic messages that you needed to triage. Hopefully you&amp;rsquo;ve come across SetupDiag. For the uninitiated, SetupDiag is a fancy little tool from Microsoft that you can run against the Windows installation logs (Panther Logs) either directly on a client or against an offline copy of the Panther logs from another client.</description></item></channel></rss>